--- ori-0.8.0/SConstruct.orig	2014-01-06 14:28:39.949716544 +0100
+++ ori-0.8.0/SConstruct	2014-01-06 14:35:39.663340382 +0100
@@ -32,29 +32,27 @@
     ("CXX", "C++ Compiler"),
     ("AS", "Assembler"),
     ("LINK", "Linker"),
-    ("BUILDTYPE", "Build type (RELEASE, DEBUG, or PERF)", "RELEASE"),
-    ("VERBOSE", "Show full build information (0 or 1)", "0"),
-    ("NUMCPUS", "Number of CPUs to use for build (0 means auto).", "0"),
-    ("WITH_FUSE", "Include FUSE file system (0 or 1).", "1"),
-    ("WITH_HTTPD", "Include HTTPD server (0 or 1).", "0"),
-    ("WITH_ORILOCAL", "Include Ori checkout CLI (0 or 1).", "0"),
-    ("WITH_MDNS", "Include Zeroconf (through DNS-SD) support (0 or 1).", "0"),
-    ("WITH_GPROF", "Include gprof profiling (0 or 1).", "0"),
-    ("WITH_GOOGLEHEAP", "Link to Google Heap Cheker.", "0"),
-    ("WITH_GOOGLEPROF", "Link to Google CPU Profiler.", "0"),
-    ("WITH_TSAN", "Enable Clang Race Detector.", "0"),
-    ("WITH_ASAN", "Enable Clang AddressSanitizer.", "0"),
-    ("WITH_LIBS3", "Include support for Amazon S3 (0 or 1).", "0"),
-    ("BUILD_BINARIES", "Build binaries (0 or 1).", "1"),
-    ("CROSSCOMPILE", "Cross compile (0 or 1).", "0"),
-    ("USE_FAKES3", "Send S3 requests to fakes3 instead of Amazon (0 or 1).",
-        "0"),
-    ("HASH_ALGO", "Hash algorithm (SHA256).", "SHA256"),
-    ("COMPRESSION_ALGO", "Compression algorithm (LZMA; FASTLZ; SNAPPY; NONE).",
-        "FASTLZ"),
-    ("CHUNKING_ALGO", "Chunking algorithm (RK; FIXED).", "RK"),
-    ("PREFIX", "Installation target directory.", "/usr/local/bin/"),
-    ("DESTDIR", "The root directory to install into. Useful mainly for binary package building", ""),
+    ("NUMCPUS", "Number of CPUs to use for build (0 means auto)", 0, None, int),
+    EnumVariable("BUILDTYPE", "Build type", "RELEASE", ["RELEASE", "DEBUG", "PERF"]),
+    BoolVariable("VERBOSE", "Show full build information", 0),
+    BoolVariable("WITH_FUSE", "Include FUSE file system", 1),
+    BoolVariable("WITH_HTTPD", "Include HTTPD server", 0),
+    BoolVariable("WITH_ORILOCAL", "Include Ori checkout CLI", 0),
+    BoolVariable("WITH_MDNS", "Include Zeroconf (through DNS-SD) support", 0),
+    BoolVariable("WITH_GPROF", "Include gprof profiling", 0),
+    BoolVariable("WITH_GOOGLEHEAP", "Link to Google Heap Cheker", 0),
+    BoolVariable("WITH_GOOGLEPROF", "Link to Google CPU Profiler", 0),
+    BoolVariable("WITH_TSAN", "Enable Clang Race Detector", 0),
+    BoolVariable("WITH_ASAN", "Enable Clang AddressSanitizer", 0),
+    BoolVariable("WITH_LIBS3", "Include support for Amazon S3", 0),
+    BoolVariable("BUILD_BINARIES", "Build binaries", 1),
+    BoolVariable("CROSSCOMPILE", "Cross compile", 0),
+    BoolVariable("USE_FAKES3", "Send S3 requests to fakes3 instead of Amazon", 0),
+    EnumVariable("HASH_ALGO", "Hash algorithm", "SHA256", ["SHA256"]),
+    EnumVariable("COMPRESSION_ALGO", "Compression algorithm", "FASTLZ", ["LZMA", "FASTLZ", "SNAPPY", "NONE"]),
+    EnumVariable("CHUNKING_ALGO", "Chunking algorithm", "RK", ["RK", "FIXED"]),
+    PathVariable("PREFIX", "Installation target directory", "/usr/local/bin/", PathVariable.PathAccept),
+    PathVariable("DESTDIR", "The root directory to install into. Useful mainly for binary package building", "", PathVariable.PathAccept),
 )
 
 env = Environment(options = opts,
@@ -82,7 +80,7 @@
 
 # Windows Configuration Changes
 if sys.platform == "win32":
-    env["WITH_FUSE"] = "0"
+    env["WITH_FUSE"] = False
     env.Append(CPPFLAGS = ['-DWIN32'])
 
 #env.Append(CPPFLAGS = [ "-Wall", "-Wformat=2", "-Wextra", "-Wwrite-strings",
@@ -120,16 +118,16 @@
     print "Error unsupported chunking algorithm"
     sys.exit(-1)
 
-if env["WITH_MDNS"] != "1":
+if not env["WITH_MDNS"]:
     env.Append(CPPFLAGS = [ "-DWITHOUT_MDNS" ])
 
-if env["WITH_LIBS3"] == "1":
+if env["WITH_LIBS3"]:
     env.Append(CPPFLAGS = [ "-DWITH_LIBS3" ])
 
-if env["USE_FAKES3"] == "1":
+if env["USE_FAKES3"]:
     env.Append(CPPDEFINES = ['USE_FAKES3'])
 
-if env["WITH_GPROF"] == "1":
+if env["WITH_GPROF"]:
     env.Append(CPPFLAGS = [ "-pg" ])
     env.Append(LINKFLAGS = [ "-pg" ])
 
@@ -160,7 +158,7 @@
 except IOError:
     pass
 
-if env["VERBOSE"] == "0":
+if not env["VERBOSE"]:
     env["CCCOMSTR"] = "Compiling $SOURCE"
     env["CXXCOMSTR"] = "Compiling $SOURCE"
     env["SHCCCOMSTR"] = "Compiling $SOURCE"
@@ -170,18 +168,18 @@
     env["LINKCOMSTR"] = "Linking $TARGET"
 
 def GetNumCPUs(env):
-    if env["NUMCPUS"] != "0":
+    if env["NUMCPUS"] > 0:
         return int(env["NUMCPUS"])
     return 2*multiprocessing.cpu_count()
 
 env.SetOption('num_jobs', GetNumCPUs(env))
 
 # Modify CPPPATH and LIBPATH
-if sys.platform != "darwin" and sys.platform != "win32" and env["CROSSCOMPILE"] == "0":
+if sys.platform != "darwin" and sys.platform != "win32" and not env["CROSSCOMPILE"]:
     env.Append(CPPFLAGS = "-D_FILE_OFFSET_BITS=64")
     env.Append(LIBPATH = [ "/usr/local/lib/event2" ])
 
-if sys.platform != "win32" and env["CROSSCOMPILE"] == "0":
+if sys.platform != "win32" and not env["CROSSCOMPILE"]:
     env.Append(CPPPATH = [ "/usr/local/include" ])
     env.Append(LIBPATH = [ "$LIBPATH", "/usr/local/lib" ])
 
@@ -219,10 +217,10 @@
     print 'Your C++ compiler and/or environment is incorrectly configured.'
     CheckFailed()
 
-if (sys.platform == "win32") or env["CROSSCOMPILE"] == "1":
-    env["HAS_PKGCONFIG"] = "0"
+if (sys.platform == "win32") or env["CROSSCOMPILE"]:
+    env["HAS_PKGCONFIG"] = False
 else:
-    env["HAS_PKGCONFIG"] = "1"
+    env["HAS_PKGCONFIG"] = True
     if not conf.CheckPkgConfig():
         print 'pkg-config not found!'
         Exit(1)
@@ -280,12 +278,12 @@
         print 'Please install liblzma'
         Exit(1)
 
-if env["WITH_FUSE"] == "1":
-    if env["HAS_PKGCONFIG"] == "1" and not conf.CheckPkg('fuse'):
+if env["WITH_FUSE"]:
+    if env["HAS_PKGCONFIG"] and not conf.CheckPkg('fuse'):
         print 'FUSE is not registered in pkg-config'
         Exit(1)
 
-if env["HAS_PKGCONFIG"] == "1":
+if env["HAS_PKGCONFIG"]:
     if not conf.CheckPkg('libevent'):
         print 'libevent is not registered in pkg-config'
         Exit(1)
@@ -295,16 +293,16 @@
     env.ParseConfig('pkg-config --libs --cflags libevent')
 
 has_event = conf.CheckLibWithHeader('', 'event2/event.h', 'C', 'event_init();')
-if not (has_event or (env["CROSSCOMPILE"] == "1")):
+if not (has_event or (env["CROSSCOMPILE"])):
     print 'Cannot link test binary with libevent 2.0+'
     Exit(1)
 
-if (env["WITH_MDNS"] == "1") and (sys.platform != "darwin"):
+if (env["WITH_MDNS"]) and (sys.platform != "darwin"):
     if not conf.CheckLibWithHeader('dns_sd','dns_sd.h','C'):
 	print 'Please install libdns_sd'
 	Exit(1)
 
-if env["HAS_PKGCONFIG"] == "1":
+if env["HAS_PKGCONFIG"]:
     if not conf.CheckPkg("openssl"):
         print 'openssl is not registered in pkg-config'
         Exit(1)
@@ -328,7 +326,7 @@
     env.Append(LIBS = ["pthread"])
 
 # Optional Components
-if env["WITH_LIBS3"] == "1":
+if env["WITH_LIBS3"]:
     env.Append(CPPPATH = '#libs3-2.0/inc')
     SConscript('libs3-2.0/SConscript', variant_dir='build/libs3-2.0')
 if env["COMPRESSION_ALGO"] == "SNAPPY":
@@ -341,17 +339,17 @@
     SConscript('libfastlz/SConscript', variant_dir='build/libfastlz')
 
 # Debugging Tools
-if env["WITH_GOOGLEHEAP"] == "1":
+if env["WITH_GOOGLEHEAP"]:
     env.Append(LIBS = ["tcmalloc"])
-if env["WITH_GOOGLEPROF"] == "1":
+if env["WITH_GOOGLEPROF"]:
     env.Append(LIBS = ["profiler"])
-if env["WITH_TSAN"] == "1":
+if env["WITH_TSAN"]:
     env.Append(CPPFLAGS = ["-fsanitize=thread", "-fPIE"])
     env.Append(LINKFLAGS = ["-fsanitize=thread", "-pie"])
-if env["WITH_ASAN"] == "1":
+if env["WITH_ASAN"]:
     env.Append(CPPFLAGS = ["-fsanitize=address"])
     env.Append(LINKFLAGS = ["-fsanitize=address"])
-if env["WITH_TSAN"] == "1" and env["WITH_ASAN"] == "1":
+if env["WITH_TSAN"] and env["WITH_ASAN"]:
     print "Cannot set both WITH_TSAN and WITH_ASAN!"
     sys.exit(-1)
 
@@ -361,30 +359,30 @@
 SConscript('liboriutil/SConscript', variant_dir='build/liboriutil')
 
 # Ori Utilities
-if env["BUILD_BINARIES"] == "1":
+if env["BUILD_BINARIES"]:
     SConscript('ori/SConscript', variant_dir='build/ori')
     SConscript('oridbg/SConscript', variant_dir='build/oridbg')
     SConscript('orisync/SConscript', variant_dir='build/orisync')
-    if env["WITH_LIBS3"] == "1":
+    if env["WITH_LIBS3"]:
         SConscript('oris3/SConscript', variant_dir='build/oris3')
-    if env["WITH_FUSE"] == "1":
+    if env["WITH_FUSE"]:
         SConscript('orifs/SConscript', variant_dir='build/orifs')
-    if env["WITH_HTTPD"] == "1":
+    if env["WITH_HTTPD"]:
         SConscript('ori_httpd/SConscript', variant_dir='build/ori_httpd')
-    if env["WITH_ORILOCAL"] == "1":
+    if env["WITH_ORILOCAL"]:
         SConscript('orilocal/SConscript', variant_dir='build/orilocal')
 
 # Install Targets
-if env["WITH_FUSE"] == "1":
+if env["WITH_FUSE"]:
     env.Install('$DESTDIR$PREFIX/bin','build/orifs/orifs')
 env.Install('$DESTDIR$PREFIX/bin','build/ori/ori')
 env.Install('$DESTDIR$PREFIX/bin','build/oridbg/oridbg')
 env.Install('$DESTDIR$PREFIX/bin','build/orisync/orisync')
-if env["WITH_LIBS3"] == "1":
+if env["WITH_LIBS3"]:
     env.Install('$DESTDIR$PREFIX/bin','build/ori/oris3')
-if env["WITH_HTTPD"] == "1":
+if env["WITH_HTTPD"]:
     env.Install('$DESTDIR$PREFIX/bin','build/ori_httpd/ori_httpd')
-if env["WITH_ORILOCAL"] == "1":
+if env["WITH_ORILOCAL"]:
     env.Install('$DESTDIR$PREFIX/bin','build/orilocal/orilocal')
 
 env.Install('$DESTDIR$PREFIX/share/man/man1','docs/ori.1')
--- ori-0.8.0/orisync/SConscript.orig	2014-01-06 14:40:04.246566391 +0100
+++ ori-0.8.0/orisync/SConscript	2014-01-06 14:40:18.071160723 +0100
@@ -30,7 +30,7 @@
 
 if sys.platform != "darwin":
     libs += ['rt', 'pthread']
-    if env["WITH_MDNS"] == "1":
+    if env["WITH_MDNS"]:
         libs += ['dns_sd']
 
 if sys.platform == "linux2":
--- ori-0.8.0/oris3/SConscript.orig	2014-01-06 14:40:04.250566273 +0100
+++ ori-0.8.0/oris3/SConscript	2014-01-06 14:40:29.045838718 +0100
@@ -19,7 +19,7 @@
 
 if sys.platform != "darwin":
     libs += ['rt']
-    if env["WITH_MDNS"] == "1":
+    if env["WITH_MDNS"]:
         libs += ['dns_sd']
 
 if sys.platform == "linux2":
--- ori-0.8.0/orilocal/SConscript.orig	2014-01-06 14:40:04.252566215 +0100
+++ ori-0.8.0/orilocal/SConscript	2014-01-06 14:40:35.364653334 +0100
@@ -47,7 +47,7 @@
 
 if sys.platform != "darwin":
     libs += ['rt']
-    if env["WITH_MDNS"] == "1":
+    if env["WITH_MDNS"]:
         libs += ['dns_sd']
 
 if sys.platform == "linux2":
--- ori-0.8.0/orifs/SConscript.orig	2014-01-06 14:40:04.254566156 +0100
+++ ori-0.8.0/orifs/SConscript	2014-01-06 14:40:47.781289080 +0100
@@ -23,7 +23,7 @@
 orifs_env.ParseConfig('pkg-config --libs --cflags fuse')
 if sys.platform != "darwin":
     libs += ['rt']
-    if env["WITH_MDNS"] == "1":
+    if env["WITH_MDNS"]:
         libs += ['dns_sd']
 if sys.platform == "linux2":
     libs += ['uuid']
--- ori-0.8.0/oridbg/SConscript.orig	2014-01-06 14:40:04.258566038 +0100
+++ ori-0.8.0/oridbg/SConscript	2014-01-06 14:40:56.821023915 +0100
@@ -47,7 +47,7 @@
 
 if sys.platform != "darwin":
     libs += ['rt']
-    if env["WITH_MDNS"] == "1":
+    if env["WITH_MDNS"]:
         libs += ['dns_sd']
 
 if sys.platform == "linux2":
--- ori-0.8.0/ori_httpd/SConscript.orig	2014-01-06 14:40:04.261565950 +0100
+++ ori-0.8.0/ori_httpd/SConscript	2014-01-06 14:41:05.300775195 +0100
@@ -17,7 +17,7 @@
     libs += ['resolv']
 else:
     libs += ['rt']
-    if env["WITH_MDNS"] == "1":
+    if env["WITH_MDNS"]:
         libs += ['dns_sd']
 
 if sys.platform == "linux2":
--- ori-0.8.0/ori/SConscript.orig	2014-01-06 14:40:04.264565862 +0100
+++ ori-0.8.0/ori/SConscript	2014-01-06 14:41:11.972579525 +0100
@@ -48,7 +48,7 @@
 
 if sys.platform != "darwin":
     libs += ['rt']
-    if env["WITH_MDNS"] == "1":
+    if env["WITH_MDNS"]:
         libs += ['dns_sd']
 
 if sys.platform == "linux2":
--- ori-0.8.0/liboriutil/SConscript.orig	2014-01-06 14:40:04.269565716 +0100
+++ ori-0.8.0/liboriutil/SConscript	2014-01-06 14:41:30.356040406 +0100
@@ -27,13 +27,13 @@
 else:
     print "Error unsupported operating system!"
 
-if env["WITH_MDNS"] == "1":
+if env["WITH_MDNS"]:
     src.append("zeroconf.cc")
 
 env.StaticLibrary("oriutil", src)
 
 # Test Binaries
-if env["BUILD_BINARIES"] == "1":
+if env["BUILD_BINARIES"]:
     env_testori = env.Clone()
     libs = ["crypto", "stdc++"]
     if sys.platform != "darwin":
--- ori-0.8.0/libori/SConscript.orig	2014-01-06 14:40:04.272565628 +0100
+++ ori-0.8.0/libori/SConscript	2014-01-06 14:41:35.940876624 +0100
@@ -35,7 +35,7 @@
 env.StaticLibrary("ori", src)
 
 # Test Binaries
-if env["BUILD_BINARIES"] == "1":
+if env["BUILD_BINARIES"]:
     env.Program("rkchunker", "rkchunker.cc")
     env.Program("fchunker", "fchunker.cc")
 
